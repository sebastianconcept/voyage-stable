(name 'Voyage-Mongo-Magritte-HolgerHansPeterFreyther.5' message 'Remove >>#*Concern* from VOContainerI have decided against using it in the future. The issue with the order (what is stronger per class setting or container?) is the main reason. I have not added this to VOContainer in newer Voyage. ' id '3c9ffdc8-aa1d-431d-881f-a977a6f69cda' date '15 May 2017' time '7:33:29.290275 pm' author 'HolgerHansPeterFreyther' ancestors ((name 'Voyage-Mongo-Magritte-HolgerHansPeterFreyther.4' message 'Remove deprecated usage in Pharo6Pragma>>#selector is deprecated, use methodSelector that will work in Pharo3 as well.' id '4ef19554-f368-5c68-b358-5fcf03dc9ebb' date '12 April 2017' time '4:06:13.98778 pm' author 'HolgerHansPeterFreyther' ancestors ((name 'Voyage-Mongo-Magritte-HolgerHansPeterFreyther.3' message 'Put the getLastError into the concern on writingWhile we only support getLastError (instead of using the insert/update/delete $cmd) we can initialize the dictionary at this point. Save some instructions during execution.' id 'abe4a765-f883-52b3-a7da-58d9047cc885' date '15 May 2016' time '11:51:56.955746 am' author 'HolgerHansPeterFreyther' ancestors ((name 'Voyage-Mongo-Magritte-HolgerHansPeterFreyther.2' message 'First try at adding consistency/writeConcernTo allow read after write, we will need to make sure that the write has succeeded. This is the first attempt at adding such consistency measures. It can be applied either globally or per collection. There is currently no way to override the collection setting.  Separate insert, update and remove because different consistency requirements could exist.Starting with MongoDB 2.6 we can optimize this further but upstream is looking at it as well.
' id '4e617aaa-59eb-5e6a-a7e7-154edefb2057' date '14 May 2016' time '11:22:21 pm' author 'HolgerHansPeterFreyther' ancestors ((name 'Voyage-Mongo-Magritte-EstebanLorenzano.1' message 'version bump
' id '10acc42b-4da1-5c09-9de5-168748473613' date '19 January 2016' time '2:16:41 pm' author 'EstebanLorenzano' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())